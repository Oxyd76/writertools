<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="WordGame" script:language="StarBasic">&apos;************************************************************
&apos;	Copyright Â© 2007 Dmitri Popov
&apos;	Anyone may run this code.
&apos;	If you wish to modify or distribute this code, then
&apos;	 you are granted a license to do so under the terms
&apos;	 of the Gnu General Public License.
&apos;	See:  http://www.gnu.org/licenses/gpl.html
&apos;************************************************************

REM The WordHunt macro shows how to generate random number, use arrays,
REM ask user for input, specify If conditions, and use loops.

Sub WordHunt()
Dim WordArray()
Dim RandomNumber As Integer
Dim RandomWord As String, Message As String, Answer As String
Dim InputWord As String, InputMessage As String, InputTitle As String

REM First of all, let&apos;s populate the WordArray with some words.
REM Note that item numbering in any array always starts with 0.
REM This means that the word &quot;apple&quot; is item number 0
WordArray=Array(&quot;apple&quot;, &quot;potato&quot;, &quot;carrot&quot;, &quot;cucumber&quot;, &quot;orange&quot;)
REM To make the game a bit more user-friendly, let&apos;s show the display message
REM asking user whether she wants to play
Message=&quot;Writer has picked up a word&quot; &amp; Chr(13)
Message=Message &amp; &quot;Would you like to guess which one?&quot;
Answer=MsgBox(Message,4,&quot;Play&quot;)
If Answer=7 then End
REM The Do ... Loop block makes the game run over and over again.
Do
REM Next, we need to generate a random number from 0 to 4.
REM The max. random number must not exceed the number of items in the array.
RandomNumber=Rnd()*4
REM Time to pick up a random word from the array.
RandomWord=WordArray(RandomNumber)
REM Now, we have to ask the user to type a word. 
InputMessage=&quot;Type your word:&quot;
InputTitle=&quot;Word game&quot;
InputWord=InputBox(InputMessage, InputTitle)
REM To stop the game, user can type a specified stop word.
REM In this case, if the field is left empty the macro exits the loop and stops.
If InputWord=&quot;&quot; then :End
End if
REM Otherwise the If block check whether the word entered by the user is the same
REM as the random word.
If InputWord=RandomWord then
REM If it is, then it displays the following message:
MsgBox &quot;Yep, that&apos;s the word!&quot;
REM But if it&apos;s not...
else
REM ...then it displays another message.
MsgBox &quot;Nope, try again.&quot;
End if
Loop
End Sub


</script:module>